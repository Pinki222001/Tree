#include<bits/stdC++.h>
using namespace std;

struct node
{
    int data;
    struct node *left,*right;
    node(int val) //constructor
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};
 

 void left_view(node *root)
 {
     queue<node*>q;
     q.push(root);
     while(!q.empty())
     {
         int n=q.size();
         for(int i=0;i<n;i++)
         {
             node *temp=q.front();
             q.pop();
             if(i==0)
             {
                 cout<<temp->data<<" ";
             }
             if(temp->left) q.push(temp->left);
             if(temp->right) q.push(temp->right);
         }
     }
 }

void right_view(node *root)
{
     queue<node*>q;
     q.push(root);
     while(!q.empty())
     {
         int n=q.size();
         for(int i=0;i<n;i++)
         {
             node *temp=q.front();
             q.pop();
             if(i==n-1)
             {
                 cout<<temp->data<<" ";
             }
             if(temp->left) q.push(temp->left);
             if(temp->right) q.push(temp->right);
         }
     }
}

void top_view(node *root)
{
    map<int,int>mp;
    queue<pair<node*,int>> que;
    que.push({root,0});
    while(!que.empty())
    {
        auto *temp=que.front();
        que.pop();
        struct node *curr=temp.first;
        int scale=temp.second;
        if(!mp[scale])
        {
            mp[scale]=curr->data;
        }
        if(curr->left) que.push({curr->left,scale-1});
        if(curr->right) que.push({curr->right,scale+1});
    }
}

void bottom_view(node *root)
{
    map<int,int>mp;
    queue<pair<node*,int>> que;
    que.push({root,0});
    while(!que.empty())
    {
        auto *temp=que.front();
        que.pop();
        struct node *curr=temp.first;
        int scale=temp.second;
        
        mp[scale]=curr->data;
        
        if(curr->left) que.push({curr->left,scale-1});
        if(curr->right) que.push({curr->right,scale+1});
    }
}

 int main()
 {
    struct node *root=new node(1);
     root->left=new node(2);
     root->right=new node(3);
     root->left->left=new node(4);
     root->left->right=new node(5);
     root->right->left=new node(6);
     root->right->right=new node(7);

     cout<<"Left view of a binary tree : "<<endl;
     left_view(root);

     cout<<"\nRight view of a binary tree : "<<endl;
     right_view(root);

     cout<<"\n Top view of a binary tree : "<<endl;
     top_view(root);

     cout<<"\n Bottom view of a binary tree : "<<endl;
     bottom_view(root);
 }
