#include<bits/stdC++.h>
using namespace std;

struct node
{
    int data;
    struct node *left,*right;
    node(int val) //constructor
    {
        data=val;
        left=NULL;
        right=NULL;
    }
};

//inorder traversal of binary tree
// void inorder(struct node *root)
// {
//     if(root==NULL)
//      return;

//     inorder(root->left);
//     cout<<root->data<<" ";
//     inorder(root->right);
// }

void inorder(struct node *root)
{
    stack<node*>s;
    while(!s.empty() || root!=NULL)
    {
        if(root!=NULL)
        {
            s.push(root);
            root=root->left;
        }
        else{
            root=s.top();
            s.pop();
            cout<<root->data<<" ";
            root=root->right;
        }
    }
}
void preorder(struct node *root)
{
    stack<node*>s;
    s.push(root);
    while(!s.empty())
    {
        struct node *temp=s.top();
        s.pop();
        cout<<temp->data<<" ";
        if(temp->right) s.push(temp->right);
        if(temp->left) s.push(temp->left);
    }
}
void postorder(node *root)
{
    stack<node *>s1;
    stack<int>s2;
    s1.push(root);
    while(!s1.empty())
    {
        struct node *temp=s1.top();
        s1.pop();
        s2.push(temp->data);
        if(temp->left) s1.push(temp->left);
        if(temp->right) s1.push(temp->right);
    }
    while(!s2.empty())
    {
        cout<<s2.top()<<" ";
        s2.pop();
    }
}

void level_order(struct node *root)
{
    int level=0,n,sum=0;
    queue<node*>q;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        sum=sum+n;
        node *temp=q.front();
        q.pop();
        if(temp!=NULL)
        {
            cout<<temp->data<<" ";
            if(temp->left) q.push(temp->left);
            if(temp->right) q.push(temp->right);
        }
        else if(!q.empty())
        {
            level++;
            q.push(NULL);
        }

    }
    cout<<"\nTotal level is : "<<level;
   // cout<<"\nTotal nodes is : "<<sum;
}

int main()
{
    struct node *root=new node(1);
     root->left=new node(2);
     root->right=new node(3);
     root->left->left=new node(4);
     root->left->right=new node(5);
     root->right->left=new node(6);
     root->right->right=new node(7);
     cout<<"Inorder Traversal  using iterative: "<<endl;
    
    inorder(root);
    cout<<"\nPreorder traversal using iterative method : "<<endl;
    preorder(root);

    cout<<"\nPostorder traversal using iterative method : "<<endl;
    postorder(root);

    cout<<"\nLevel order traversal :"<<endl;
    level_order(root);
    return 0;

}
